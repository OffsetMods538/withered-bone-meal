import dex.plugins.outlet.v2.util.ReleaseType

plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'io.github.dexman545.outlet' version '1.6.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "withered-bone-meal"
version = "${project.mod_version}+${project.minecraft_version}"

outlet {
	maintainPropertiesFile = System.getenv("DISABLE_PROPERTIES_UPDATE") == null
	mcVersionRange = project.supported_minecraft_versions
	allowedReleaseTypes = Set.of(ReleaseType.RELEASE)
	propertiesData = [
	        'yarn_version': outlet.yarnVersion(project.minecraft_version),
			'loader_version': outlet.loaderVersion(),
			'fapi_version': outlet.fapiVersion(project.minecraft_version)
	]
}


loom {
	runs {
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=withered-bone-meal"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
			        "src/main/generated"
			]
		}
	}
}

configurations {
	includeModImplementation

	include.extendsFrom           includeModImplementation
	modImplementation.extendsFrom includeModImplementation


	includeImplementation
	
	include.extendsFrom        includeImplementation
	implementation.extendsFrom includeImplementation
}

repositories {

}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"


	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fapi_version}"
}

processResources {
	inputs.properties(Map.of(
		"modVersion",                 project.version,
		"supportedMinecraftVersions", project.supported_minecraft_versions
	))

	filesMatching("fabric.mod.json") {
		expand(Map.of(
			"modVersion",                 project.version,
			"supportedMinecraftVersions", project.supported_minecraft_versions
		))
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}
